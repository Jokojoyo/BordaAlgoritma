@using BordaAlgorithm.ViewModels
@model LoginViewModel
@{
    ViewBag.Title = "Login";
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <link href="~/favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <link href="~/favicon.ico" rel="icon" type="image/ico" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>@ViewBag.Title</title>
    <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport">
    @Styles.Render("~/adminlte/css")
    @Scripts.Render("~/adminlte/js")
</head>
<body class="hold-transition login-page" style="background: url('@Url.Content("~/Media/bg-login.jpg")'); background-size: inherit">
    <div class="login-box">
        <div class="login-box-body" style="background: rgba(255, 255, 255, 0.90);">
            <div class="register-logo">
                <img height="100px" width="100px" class="user-image" src="@Url.Content("~/Media/home-logo.png")" alt="Logo"><br>
                <a href="#">
                    <small style="font-size: 65%!important;"><b>Borda</b> Algorithm <sup style="font-size: 8pt; font-weight: bold" class="text-blue">BETA</sup></small>
                </a>
            </div>

            <p style="font-style: italic; text-align: left; font-size: 10pt">Sign in to start your session</p>
            @using (Html.BeginForm("Login", "Auth", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post))
            {
                <p class="text-red">@Html.ValidationMessage(Constants._ERROR)</p>
                @Html.AntiForgeryToken()
                <div class="form-group has-feedback @(ViewData.ModelState.Keys.Contains("UserName") && ViewData.ModelState["UserName"].Errors.Count > 0 ? "has-error" : "")">
                    @Html.TextBoxFor(m => m.Username, new { @class = "form-control", placeholder = "junanta.thomas@gmail.com" })
                    <span class="glyphicon glyphicon-user form-control-feedback"></span>
                    @Html.ValidationMessageFor(m => m.Username, "", new { @class = "help-block" })
                </div>
                <div class="form-group has-feedback @(ViewData.ModelState.Keys.Contains("Password")  && ViewData.ModelState["Password"].Errors.Count > 0 ? "has-error" : "")">
                    @Html.PasswordFor(m => m.Password, new { @class = "form-control", placeholder = "Password" })
                    <span class="glyphicon glyphicon-lock form-control-feedback"></span>
                    @Html.ValidationMessageFor(m => m.Password, "", new { @class = "help-block" })
                </div>
                <div class="form-group">
                    <div class="col-md-12">
                        <div class="checkbox" style="padding-left: 5px">
                            @Html.CheckBoxFor(m => m.RememberMe)
                            @Html.LabelFor(m => m.RememberMe)
                        </div>
                    </div>
                </div>
                <div class="form-group" style="text-align: right">
                    <input type="submit" value="Login" class="btn btn-success btn-flat" />
                </div>
                <div class="form-group" style="text-align: left">
                    <a type="text" style="font-style:italic;text-decoration:underline;font-size:12pt" href="@(Url.Action("Register", "Auth"))"> Create an Account?</a>
                </div>
            }
            <div class="clearfix"></div>
        </div>
    </div>
</body>
</html>


